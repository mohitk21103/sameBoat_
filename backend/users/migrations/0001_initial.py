# Generated by Django 5.2.4 on 2025-08-11 19:02

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=50, unique=True, verbose_name='User Name')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Jobs',
            fields=[
                ('job_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_title', models.CharField(max_length=200, verbose_name='Job Title')),
                ('company_name', models.CharField(max_length=250, verbose_name='Company Name')),
                ('location', models.CharField(max_length=300, verbose_name='Location')),
                ('employment_type', models.CharField(choices=[('FULLTIME', 'Full Time'), ('PARTTIME', 'Part Time'), ('INTERNSHIP', 'Internship'), ('CONTRACT', 'Contract')], default='FULLTIME', max_length=20)),
                ('experience_required', models.CharField(max_length=20, verbose_name='Experience')),
                ('skills', models.JSONField(blank=True, default=list, verbose_name='Skills')),
                ('current_status', models.CharField(choices=[('SAVED', 'Saved'), ('APPLIED', 'Applied'), ('SHORTLISTED', 'Shortlisted'), ('INTERVIEW', 'Interview'), ('OFFER', 'Offer'), ('REJECTED', 'Rejected')], default='SAVED', max_length=20)),
                ('applied_date', models.DateField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('interview_notes', models.JSONField(blank=True, default=dict, verbose_name='Interview Notes')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('job_url', models.URLField(blank=True, max_length=500, verbose_name='Job URL')),
                ('resume', models.FileField(upload_to='resumes', verbose_name='resume')),
                ('cover_letter', models.FileField(upload_to='coverLetters', verbose_name='resume')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'jobs',
            },
        ),
    ]
